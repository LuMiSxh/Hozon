name: Release and Documentation

on:
    push:
        branches:
            - main
        paths:
            - "**/Cargo.toml"

permissions:
    contents: write
    pages: write
    id-token: write

jobs:
    detect_version_change:
        runs-on: ubuntu-latest
        outputs:
            version_changed: ${{ steps.check_version.outputs.version_changed }}
            new_version: ${{ steps.check_version.outputs.new_version }}
            previous_version: ${{ steps.check_version.outputs.previous_version }}

        steps:
            - name: Initialize repository checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 2

            - name: Configure Rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: Detect Cargo.toml version changes
              id: check_version
              run: |
                  echo "EXECUTING: Cargo.toml version change detection"

                  # Extract current version from Cargo.toml
                  CURRENT_VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version')
                  echo "CURRENT_VERSION: $CURRENT_VERSION"

                  # Extract previous version from previous commit
                  git checkout HEAD~1 -- Cargo.toml 2>/dev/null || {
                    echo "STATUS: No previous Cargo.toml found - treating as initial version"
                    echo "version_changed=true" >> $GITHUB_OUTPUT
                    echo "new_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
                    echo "previous_version=none" >> $GITHUB_OUTPUT
                    exit 0
                  }

                  PREVIOUS_VERSION=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].version' 2>/dev/null || echo "unknown")
                  echo "PREVIOUS_VERSION: $PREVIOUS_VERSION"

                  # Restore current Cargo.toml
                  git checkout HEAD -- Cargo.toml

                  # Compare versions
                  if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
                    echo "STATUS: Version change detected: $PREVIOUS_VERSION -> $CURRENT_VERSION"
                    echo "version_changed=true" >> $GITHUB_OUTPUT
                    echo "new_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
                    echo "previous_version=v$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
                  else
                    echo "STATUS: No version change detected"
                    echo "version_changed=false" >> $GITHUB_OUTPUT
                    echo "new_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
                    echo "previous_version=v$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
                  fi

    validate_and_test:
        runs-on: ubuntu-latest
        needs: detect_version_change
        if: ${{ needs.detect_version_change.outputs.version_changed == 'true' }}

        steps:
            - name: Initialize repository checkout
              uses: actions/checkout@v4

            - name: Configure Rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: Initialize Rust dependency cache
              uses: Swatinem/rust-cache@v2

            - name: Execute comprehensive test suite
              run: |
                  echo "EXECUTING: Comprehensive test validation"
                  cargo test --verbose --all-features
                  echo "STATUS: All tests completed successfully"

            - name: Validate project compilation
              run: |
                  echo "EXECUTING: Release build validation"
                  cargo build --release --verbose
                  echo "STATUS: Release build completed successfully"

            - name: Execute cargo check validation
              run: |
                  echo "EXECUTING: Cargo check validation"
                  cargo check --all-targets --all-features
                  echo "STATUS: Cargo check validation completed"

    generate_documentation:
        runs-on: ubuntu-latest
        needs: [detect_version_change, validate_and_test]
        if: ${{ needs.detect_version_change.outputs.version_changed == 'true' }}

        steps:
            - name: Initialize repository checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Configure Rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: Initialize Rust dependency cache
              uses: Swatinem/rust-cache@v2

            - name: Generate cargo documentation
              run: |
                  echo "EXECUTING: Documentation generation process"
                  cargo doc --no-deps --all-features --document-private-items
                  echo "STATUS: Documentation generation completed"

            - name: Prepare documentation for deployment
              run: |
                  echo "EXECUTING: Documentation deployment preparation"

                  # Create docs directory structure
                  mkdir -p docs-output
                  cp -r target/doc/* docs-output/

                  # Create index.html redirect to main crate docs
                  CRATE_NAME=$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[0].name' | tr '-' '_')
                  cat > docs-output/index.html << EOF
                  <!DOCTYPE html>
                  <html>
                  <head>
                    <meta charset="utf-8">
                    <meta http-equiv="refresh" content="0; url=./$CRATE_NAME/">
                    <title>Documentation Redirect</title>
                  </head>
                  <body>
                    <p>Redirecting to <a href="./$CRATE_NAME/">documentation</a>...</p>
                  </body>
                  </html>
                  EOF

                  echo "STATUS: Documentation preparation completed"

            - name: Deploy documentation to docs branch
              run: |
                  echo "EXECUTING: Documentation branch deployment"

                  git config user.name "github-actions[bot]"
                  git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

                  # Create or update docs branch
                  git checkout --orphan docs || git checkout docs

                  # Clear existing content
                  git rm -rf . || true

                  # Copy documentation
                  cp -r docs-output/* .

                  # Commit documentation
                  git add .
                  git commit -m "Documentation update for ${{ needs.detect_version_change.outputs.new_version }}" || echo "No changes to commit"

                  # Push to docs branch
                  git push origin docs --force

                  echo "STATUS: Documentation deployed to docs branch"

    create_release:
        runs-on: ubuntu-latest
        needs: [detect_version_change, validate_and_test, generate_documentation]
        if: ${{ needs.detect_version_change.outputs.version_changed == 'true' }}

        steps:
            - name: Initialize repository checkout
              uses: actions/checkout@v4

            - name: Configure Rust toolchain
              uses: dtolnay/rust-toolchain@stable

            - name: Initialize Rust dependency cache
              uses: Swatinem/rust-cache@v2

            - name: Generate release artifacts
              run: |
                  echo "EXECUTING: Release artifact generation"
                  cargo build --release --verbose

                  # Create release directory
                  mkdir -p release-artifacts

                  # Copy release binaries
                  find target/release -maxdepth 1 -type f -executable -not -name "*.*" -exec cp {} release-artifacts/ \; || true

                  # Generate artifact metadata
                  cat > release-artifacts/build-info.json << EOF
                  {
                    "version": "${{ needs.detect_version_change.outputs.new_version }}",
                    "previous_version": "${{ needs.detect_version_change.outputs.previous_version }}",
                    "commit_hash": "${{ github.sha }}",
                    "build_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
                    "rust_version": "$(rustc --version)",
                    "build_environment": "github-actions"
                  }
                  EOF

                  echo "STATUS: Release artifacts generated"

            - name: Create compressed release archive
              run: |
                  echo "EXECUTING: Release archive creation"
                  tar -czf release-${{ needs.detect_version_change.outputs.new_version }}.tar.gz -C release-artifacts .
                  echo "STATUS: Release archive created"

            - name: Generate release notes content
              id: release_notes
              run: |
                  echo "EXECUTING: Release notes generation"

                  # Generate enhanced release notes
                  cat > release_notes.md << EOF
                  # Release ${{ needs.detect_version_change.outputs.new_version }}

                  **Release Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
                  **Commit Reference:** \`${{ github.sha }}\`
                  **Previous Version:** ${{ needs.detect_version_change.outputs.previous_version }}

                  ## Version Information

                  This release contains version ${{ needs.detect_version_change.outputs.new_version }} with updates from the previous version ${{ needs.detect_version_change.outputs.previous_version }}.

                  **Trigger:** Automatic release generated due to Cargo.toml version change
                  **Commit Message:** ${{ github.event.head_commit.message }}

                  ## Build Information

                  - **Rust Version:** $(rustc --version)
                  - **Build Environment:** GitHub Actions
                  - **Test Status:** All tests passed
                  - **Documentation:** Updated and deployed to docs branch

                  ## Artifacts

                  This release includes compiled binaries and build metadata.

                  ## Documentation

                  Updated documentation is available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
                  EOF

                  echo "STATUS: Release notes generated"

            - name: Execute GitHub release creation
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const fs = require('fs');
                      const path = require('path');

                      console.log('EXECUTING: GitHub release creation process');

                      // Read release notes
                      const releaseNotes = fs.readFileSync('release_notes.md', 'utf8');

                      // Create the release
                      const release = await github.rest.repos.createRelease({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        tag_name: '${{ needs.detect_version_change.outputs.new_version }}',
                        target_commitish: '${{ github.sha }}',
                        name: 'Release ${{ needs.detect_version_change.outputs.new_version }}',
                        body: releaseNotes,
                        draft: false,
                        prerelease: false
                      });

                      console.log('STATUS: GitHub release created successfully');
                      console.log('RELEASE_URL:', release.data.html_url);

                      // Upload release archive
                      const archivePath = 'release-${{ needs.detect_version_change.outputs.new_version }}.tar.gz';
                      if (fs.existsSync(archivePath)) {
                        const archiveData = fs.readFileSync(archivePath);

                        await github.rest.repos.uploadReleaseAsset({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          release_id: release.data.id,
                          name: path.basename(archivePath),
                          data: archiveData
                        });

                        console.log('STATUS: Release archive uploaded successfully');
                      }

            - name: Generate release completion notification
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const success = '${{ job.status }}' === 'success';
                      const status = success ? 'COMPLETED_SUCCESSFULLY' : 'EXECUTION_FAILED';
                      const statusIndicator = success ? 'PASS' : 'FAIL';

                      // Generate commit comment with release status
                      await github.rest.repos.createCommitComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        commit_sha: '${{ github.sha }}',
                        body: `**Release Creation Status:** ${statusIndicator}\n\n` +
                              `**Release Version:** ${{ needs.detect_version_change.outputs.new_version }}\n` +
                              `**Previous Version:** ${{ needs.detect_version_change.outputs.previous_version }}\n` +
                              `**Trigger:** Cargo.toml version change detection\n` +
                              `**Status:** ${status}\n` +
                              `**Documentation:** Deployed to docs branch\n` +
                              `**Workflow Reference:** [View Execution Log](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
                      });
